import random


class Stock:
	def __init__(self, name, price, funds):
		self.name = name
		self.price = price
		self.funds = funds
		self.split_history = []
		self.invested_value = funds / price
		self.invested_history = []
		self.price_history = [price]
		
	quarter = 0
 
	def update_price(self):  # method
		
		self.invested_history.append(self.invested_value)
		index = random.randint(0, 100)
		if self.price < 0.10:  # if the price is less than 10 pence
			print(f"{self.name} is too low to trade")
		else:
			if index <= 25:  # 25% chance of a price drop
				print(f"{self.name} invested value: " + str(self.invested_value))
				drop_percent = random.randint(25, 75) / 100.0
				self.price -= self.price * drop_percent
				self.price -= self.price * 0.125
				self.invested_value -= self.invested_value * drop_percent
				self.invested_value -= self.invested_value * 0.125
				self.price_history.append(self.price)  # Append new price to price history
				#print("New price: " + str(self.price))
				#print(f"{self.name} dropped: " + str(self.invested_value))
				#print(self.price_history)
				#self.latest_loss = self.price * drop_percent
				#self.loss_history.append((year + 1, self.latest_loss))
			elif index <= 50:  # 25% chance of a price increase
				#print(f"{self.name} invested value: " + str(self.invested_value))
				increase_percent = random.randint(1, 25) / 100.0
				self.price += self.price * increase_percent
				self.price -= self.price * 0.125
				self.invested_value += self.invested_value * increase_percent
				self.invested_value -= self.invested_value * 0.125
				#print(f"{self.name} increased: " + str(self.invested_value))
			else:
				#print(f"{self.name} invested value: " + str(self.invested_value))
				increase_percent = random.randint(15, 35) / 100.0
				self.price += self.price * increase_percent
				self.invested_value += self.invested_value * increase_percent
				#print(f"{self.name} increased: " + str(self.invested_value))
			print(f'''
        {self.name} has been updated
        ----------------------------
        The stock price started at: {self.price_history[0]} and is now: {self.price:.2f}
        The amount invested was {self.invested_history[0]:.2f} and is now {self.invested_value:.2f}
        Your investment is now worth: {self.invested_value:.2f}
        
        The increase/decrease in price is: {self.price - self.price_history[0]}
        
        ----------------------------
        ''')
			self.price_history.append(self.price)
   
	def update_splits(self, stocks):
		self.split_history.append((self.name, self.price, self.funds, self.invested_value))
		print(f'''
		THIS IS TO SIMULATE A YEAR
		
		{stocks[0].split_history}
		{stocks[1].split_history}
		{stocks[2].split_history}''')
			
"""            
	def simulate(self):
		index = random.randint(0, 100)
		
		
		if index <= 25:
			# display initial investment value
			self.invested_value -= self.invested_value * 0.25
			print(f"{self.name} dropped: " + str(self.invested_value))
			self.price -= self.price * 0.25
			self.price_history.append(self.price)  # Append new price to price history
			print("New price: " + str(self.price))
			print(self.price_history)
		elif index <= 50:
			print(f"{self.name} invested value: " + str(self.invested_value))
			self.invested_value += self.invested_value * 0.25
			print(f"{self.name} increased: " + str(self.invested_value))
			self.price += self.price * 0.25
			self.price_history.append(self.price)  # Append new price to price history
			print("New price: " + str(self.price))
			print(self.price_history)
		else:
			print(f"{self.name} stayed the same")
			print("New price: " + str(self.price))
		print(f'''
        Your investment is now worth: {self.invested_value}
        The stock price started at: {self.price_history[0]} and is now: {self.price}
        The increase/decrease in price is: {self.price - self.price_history[0]}
        ''')
"""

stocks = [
    Stock("Dog", 2, 50),
	Stock("Cat", 1, 50),
	Stock("Mouse", 3, 50)
]
quarter = 0
for i in range(12):
	print(f"Quarter {i + 1}")
	for stock in stocks:
		stock.update_price()
		if quarter % 4 == 0:
			stock.update_splits(stocks)
		quarter += 1


"""
class Stock:
	def __init__(self, price, funds):
		self.price = price
		self.funds = funds
		self.invested_value = funds / price
		self.price_history = [price]

	def simulate(self):
		index = random.randint(0, 100)

		if index <= 25:
			self.invested_value -= self.invested_value * 0.25
			print("Stock dropped" + str(self.invested_value))
			appended_price = self.price_history # decreate price and append to price history
			print(self.price_history)
			price = appended_price
		elif index <= 50:
			self.invested_value += self.invested_value * 0.25
			print("Stock increased" + str(self.invested_value))
			appended_price = self.price_history
			print(self.price_history)
			price = appended_price
		else:
			print("Stock stayed the same")

Stock(2, 10)

for i in range(10):
	Stock.simulate([0])


price = 2
funds = 10
new_price = 0

invested_value = funds / price
print("Invested value: ", invested_value)



index = random.randint(0, 100)

if index <= 25:
	invested_value -= invested_value * 0.25
	print("Stock dropped" + str(invested_value))
elif index <= 50:
	invested_value += invested_value * 0.25
	print("Stock increased" + str(invested_value))
else:
	print("Stock stayed the same")
 
""" 

