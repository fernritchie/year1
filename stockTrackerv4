import random
import matplotlib.pyplot as plt

class Stock:
    def __init__(self, name, price):  # constructor
        self.name = name
        self.price = price
        self.history = [price]
        self.latest_loss = 0
        self.loss_history = []  # list to store the latest loss
        self.investment_splits = []  # list to store investment splits

    def update_splits(self, year, invest):
        self.investment_splits.append((self.name, year + 1, invest))
        return self.investment_splits

    def update_price(self, index, year):  # method
        if self.price < 0.10:  # if the price is less than 10 pence
            print(f"{self.name} is too low to trade")
        else:
            if index <= 25:  # 25% chance of a price drop
                drop_percent = random.randint(25, 75) / 100.0
                self.price -= self.price * drop_percent
                self.price -= self.price * 0.125
                self.latest_loss = self.price * drop_percent
                self.loss_history.append((year + 1, self.latest_loss))
            elif index <= 50:  # 25% chance of a price increase
                increase_percent = random.randint(1, 25) / 100.0
                self.price += self.price * increase_percent
                self.price -= self.price * 0.125
            else:
                increase_percent = random.randint(15, 35) / 100.0
                self.price += self.price * increase_percent + self.latest_loss

            self.history.append(self.price)

stocks = [
    Stock('sky hooks', 1.57),
    Stock('tartan paint', 3.13),
    Stock('fishnet umbrellas', 2.59)
]

funds = 150
year = 0
quarter = 0

while True:
    print(f'''
          Welcome to the program!
          You have £{funds:.2f} left to split.
          
          The current stock prices are:
          {stocks[0].name} is currently worth £{stocks[0].price:.2f} per share
          {stocks[1].name} is currently worth £{stocks[1].price:.2f} per share
          {stocks[2].name} is currently worth £{stocks[2].price:.2f} per share
          '''
          )

    for stock in stocks:
        while True:
            try:
                print(f"You have £{funds:.2f} to invest.")
                print(f"You can buy a total of {funds / stock.price:.2f} shares in {stock.name}")
                invest = float(input(f"Enter investment amount for {stock.name}: £"))
                #calculate_invest = funds / invest
                print(f"You have invested £{invest:.2f} in {stock.name}")
                stock.update_splits(year, invest)  # Call the method on the instance
                if invest < 0:
                    raise ValueError("Invalid amount. Please enter a positive number.")
                if invest > funds:
                    raise ValueError(f"Insufficient funds. You have only £{funds:.2f} left.")
                funds -= invest
                break
            except ValueError as e:
                print(e)
                
    while True:
        print(f'''
              -----------------------
              /Year {year + 1} and quarter {quarter + 1} /
              -----------------------
              ''')

        for stock in stocks:
            index = random.randint(1, 100)
            stock.update_price(index, year)
            print(f"{stock.name} is now £{stock.price:.2f}")
            print(f"{stock.name} latest loss: {stock.latest_loss}")
            print(f"{stock.name} loss history: {stock.loss_history}")
            print(f"Previous splits: {stock.investment_splits}")

        quarter += 1
        if quarter == 4:
            quarter = 0
            year += 1

            for stock in stocks:
                stock.latest_loss = 0

            break

    if year >= 3:
        withdraw_funds = input("Would you like to withdraw funds? (y/n): ")
        if withdraw_funds == "y":
            print(f"Thank you for playing. You have withdrawn £{funds:.2f}")
            print(
                f'''Your stocks are now worth:
                ----------- 
                /sky hooks: {stocks[0].price:.2f}/
                -----------
                /tartan paint: {stocks[1].price:.2f}/
                ----------------
                /fishnet umbrella: {stocks[2].price:.2f}/
                ----------------'''
                )

            print(f"Your stock prices started at {stocks[0].history[0]:.2f}, {stocks[1].history[0]:.2f} and {stocks[2].history[0]:.2f}")
            raise SystemExit
        else:
            pass

#50
# invested_funds = 